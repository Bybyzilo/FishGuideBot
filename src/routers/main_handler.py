from typing import Optional

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup

from keyboards import reply_keyboards, inline_keyboards
from parser import fishing_forecast


router = Router()



@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(
        text='üé£ –ü—Ä–∏–≤–µ—Ç, —Ä—ã–±–∞–∫!\n\n'
             '–Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ä—ã–±–∞–ª–∫–∏! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≤–ª–∏, –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏ –∏ —Å–Ω–∞—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –ª–æ–≤–ª–∏. \n\n'
             '–ù–µ –∑–Ω–∞–µ—à—å, –≥–¥–µ –ª–æ–≤–∏—Ç—å? –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ª—É—á—à–∏—Ö —Å–µ–∑–æ–Ω–∞—Ö –¥–ª—è –ª–æ–≤–ª–∏? –ò–ª–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —É–ª–æ–≤–æ–º? –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!\n'
             '–£–¥–∞—á–Ω–æ–π —Ä—ã–±–∞–ª–∫–∏! üêü',
        reply_markup=reply_keyboards.main_kb
    )


@router.message(F.text.lower() == '–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
async def back_in_menu(message: Message, state: Optional[FSMContext]=None):
    """ Back in main menu """

    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
        reply_markup=reply_keyboards.main_kb
    )

    if state:
        await state.clear()



@router.message(F.text == 'üåÖ –ü—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞')
async def bite_forecast_answer(message: Message):
    data: dict = await fishing_forecast()

    await message.answer(str(data))

    await message.answer(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑–∞',
            reply_markup=reply_keyboards.forecast_kb
        )


@router.message(F.text == 'üèùÔ∏è –ú–µ—Å—Ç–∞ –ª–æ–≤–ª–∏')
async def fish_info_answer(message: Message):
    await message.answer(
        text='–ü–æ–¥—Å–∫–∞–∑–∫–∏ –æ –ª—É—á—à–∏—Ö –º–µ—Å—Ç–∞—Ö –¥–ª—è —Ä—ã–±–Ω–æ–π –ª–æ–≤–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ '
             '–æ—Ç —Ä–µ–≥–∏–æ–Ω–∞, –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞ –∏ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.\n\n'
             '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–∑—ã–≤—ã –∏ –æ—Ç–∑—ã–≤—ã –æ –º–µ—Å—Ç–∞—Ö –ª–æ–≤–ª–∏.',
        reply_markup=inline_keyboards.back_in_menu_kb
    )


@router.message(F.text == 'üé£ –°–æ–≤–µ—Ç—ã –ø–æ —Ä—ã–±–∞–ª–∫–µ')
async def guide_answer(message: Message):
    await message.answer(
        text='–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ª–æ–≤–ª–µ —Ä—ã–±—ã',
        reply_markup=reply_keyboards.guide_kb
    )



@router.message(F.text == '–¢–µ—Ö–Ω–∏–∫–∞ –ª–æ–≤–ª–∏')
async def guid_answer(message: Message):
    await message.answer(
        text='–£–∫–∞–∑–∞–Ω–∏—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Ç–æ–¥–∞–º –ª–æ–≤–ª–∏ '
        '(—Ñ–∏–¥–µ—Ä—ã, —Å–ø–∏–Ω–Ω–∏–Ω–≥, –ø–æ–ø–ª–∞–≤–æ–∫ –∏ —Ç.–¥.) '
        '—Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Å–µ–∫—Ä–µ—Ç–æ–≤.\n\n'
        '–°–æ–≤–µ—Ç—ã –ø–æ –ª–æ–≤–ª–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ä—ã–±—ã '
        '(—â—É–∫–∞, –∫–∞—Ä–ø, –ª–µ—â –∏ –¥—Ä.).',
        reply_markup=inline_keyboards.back_in_guide_kb
    )


@router.message(F.text == '–í—ã–±–æ—Ä —Å–Ω–∞—Å—Ç–µ–π')
async def guid_answer(message: Message):
    await message.answer(
        text='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É —É–¥–æ—á–µ–∫, '
        '–∫–∞—Ç—É—à–µ–∫, –ª–µ—Å–æ–∫ –∏ –ø—Ä–∏–º–∞–Ω–æ–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö '
        '–≤–∏–¥–æ–≤ —Ä—ã–±—ã –∏ —É—Å–ª–æ–≤–∏–π –ª–æ–≤–ª–∏.\n\n'
        '–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±–æ—Ä–∫–µ —Å–Ω–∞—Å—Ç–∏.',
        reply_markup=inline_keyboards.back_in_guide_kb
    )


""" Handlers of the bite forecast """

# @router.message(F.text == '–°–µ–≥–æ–¥–Ω—è')
# async def today_answer(message: Message):

    # data: dict = await fishing_forecast()
    # days = list(data.keys())
    # day_now = data[days[0]]

    # # await message.answer('–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –¥–µ–º–æ –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ–¥–Ω–æ–π —Ä–µ–∫–æ–π - –¢–µ–º–µ—Ä–Ω–∏–∫')
    # await message.answer(
    #     text='–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –¥–µ–º–æ –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ–¥–Ω–æ–π —Ä–µ–∫–æ–π - –¢–µ–º–µ—Ä–Ω–∏–∫'
    #          f'      –°–µ–≥–æ–¥–Ω—è      \n'
    #          f'     {day_now['date']}      \n\n'

    #          f'–í—Ä–µ–º—è | —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞      \n'
    #          f'–ù–æ—á—å 02:00  | {day_now['air_temp'][0]} ¬∞C \n'
    #          f'–£—Ç—Ä–æ 08:00  | {day_now['air_temp'][1]} ¬∞C \n'
    #          f'–î–µ–Ω—å 14:00  | {day_now['air_temp'][2]} ¬∞C \n'
    #          f'–í–µ—á–µ—Ä 20:00 | {day_now['air_temp'][3]} ¬∞C\n\n'

    #          f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã\n'
    #          f'–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å/–≥–ª—É–±–∏–Ω–∞\n'
    #          f'{day_now['water_temp'][0]} ¬∞C / {day_now['water_temp'][1]} ¬∞C\n\n'

    #          f'–í—Ä–µ–º—è | –æ–±–ª–∞—á–Ω–æ—Å—Ç—å\n'
    #          f'–ù–æ—á—å 02:00  | {day_now['cloudiness'][0]} % \n'
    #          f'–£—Ç—Ä–æ 08:00  | {day_now['cloudiness'][1]} % \n'
    #          f'–î–µ–Ω—å 14:00  | {day_now['cloudiness'][2]} % \n'
    #          f'–í–µ—á–µ—Ä 20:00 | {day_now['cloudiness'][3]} %\n\n'

    #          f'–í—Ä–µ–º—è | –¥–∞–≤–ª–µ–Ω–∏–µ\n'
    #          f'–ù–æ—á—å 02:00  | {day_now['pressure'][0]} –º–º. —Ä—Ç. —Å—Ç. \n'
    #          f'–£—Ç—Ä–æ 08:00  | {day_now['pressure'][1]} –º–º. —Ä—Ç. —Å—Ç. \n'
    #          f'–î–µ–Ω—å 14:00  | {day_now['pressure'][2]} –º–º. —Ä—Ç. —Å—Ç. \n'
    #          f'–í–µ—á–µ—Ä 20:00 | {day_now['pressure'][3]} –º–º. —Ä—Ç. —Å—Ç.\n\n'

    #     )


@router.message(F.text == '–ó–∞–≤—Ç—Ä–∞')
async def tomorrow_answer(message: Message):
    pass


@router.message(F.text == '–ù–∞ 5 –¥–Ω–µ–π')
async def on_five_day_answer(message: Message):
    pass

from typing import Optional

from aiogram import Router, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import StatesGroup, State

from keyboards import reply_keyboards, inline_keyboards
from parser import fishing_forecast
from config import moon_image
from generators import generate_response


router = Router()


class GetAiMessage(StatesGroup):
    send_message = State()


# @router.message(F.text == '–°–ø—Ä–æ—Å–∏—Ç—å —É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏')
# async def ai(message: Message, state: FSMContext):

#     res = await generate_response(message.text)
#     print(res)
#     await message.answer(res.choices[0].message.content)


@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(
        text='üé£ –ü—Ä–∏–≤–µ—Ç, —Ä—ã–±–∞–∫!\n\n'
             '–Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ä—ã–±–∞–ª–∫–∏! –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≤–ª–∏, –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ª—É—á—à–∏–µ –ø—Ä–∏–º–∞–Ω–∫–∏ –∏ —Å–Ω–∞—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –ª–æ–≤–ª–∏. \n\n'
             '–ù–µ –∑–Ω–∞–µ—à—å, –≥–¥–µ –ª–æ–≤–∏—Ç—å? –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ –ª—É—á—à–∏—Ö —Å–µ–∑–æ–Ω–∞—Ö –¥–ª—è –ª–æ–≤–ª–∏? –ò–ª–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —É–ª–æ–≤–æ–º? –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É!\n'
             '–£–¥–∞—á–Ω–æ–π —Ä—ã–±–∞–ª–∫–∏! üêü',
        reply_markup=reply_keyboards.main_kb
    )


@router.message(StateFilter(None), F.text == '–°–ø—Ä–æ—Å–∏—Ç—å —É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏')
async def cmd_ai(message: Message, state: FSMContext):
    await message.answer(
        text='–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:'
    )
    await state.set_state(GetAiMessage.send_message)


@router.message(
        GetAiMessage.send_message,
        F.text != '–°–ø—Ä–æ—Å–∏—Ç—å —É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏'
)
async def get_ai_answer(message: Message, state: FSMContext):
    # await state.update_data()

    res = await generate_response(message.text)
    print(res)
    await message.answer(res.choices[0].message.content)


@router.message(F.text.lower() == '‚¨Ö –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
async def back_in_menu(message: Message, state: Optional[FSMContext]=None):
    """ Back in main menu """

    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
        reply_markup=reply_keyboards.main_kb
    )

    if state:
        await state.clear()



@router.message(F.text == 'üåÖ –ü—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞')
async def bite_forecast_answer(message: Message):

    await message.answer(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≥–Ω–æ–∑–∞',
            reply_markup=reply_keyboards.forecast_kb
        )


@router.message(F.text == 'üèùÔ∏è –ú–µ—Å—Ç–∞ –ª–æ–≤–ª–∏')
async def fish_info_answer(message: Message):
    await message.answer(
        text='–ü–æ–¥—Å–∫–∞–∑–∫–∏ –æ –ª—É—á—à–∏—Ö –º–µ—Å—Ç–∞—Ö –¥–ª—è —Ä—ã–±–Ω–æ–π –ª–æ–≤–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ '
             '–æ—Ç —Ä–µ–≥–∏–æ–Ω–∞, –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞ –∏ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.\n\n'
             '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–∑—ã–≤—ã –∏ –æ—Ç–∑—ã–≤—ã –æ –º–µ—Å—Ç–∞—Ö –ª–æ–≤–ª–∏.',
        reply_markup=inline_keyboards.back_in_menu_kb
    )


@router.message(F.text == 'üé£ –°–æ–≤–µ—Ç—ã –ø–æ —Ä—ã–±–∞–ª–∫–µ')
async def guide_answer(message: Message):
    await message.answer(
        text='–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ª–æ–≤–ª–µ —Ä—ã–±—ã',
        reply_markup=reply_keyboards.guide_kb
    )


@router.message(F.text == '–¢–µ—Ö–Ω–∏–∫–∞ –ª–æ–≤–ª–∏')
async def guid_answer(message: Message):
    await message.answer(
        text='–£–∫–∞–∑–∞–Ω–∏—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Ç–æ–¥–∞–º –ª–æ–≤–ª–∏ '
        '(—Ñ–∏–¥–µ—Ä—ã, —Å–ø–∏–Ω–Ω–∏–Ω–≥, –ø–æ–ø–ª–∞–≤–æ–∫ –∏ —Ç.–¥.) '
        '—Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Å–µ–∫—Ä–µ—Ç–æ–≤.\n\n'
        '–°–æ–≤–µ—Ç—ã –ø–æ –ª–æ–≤–ª–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –≤–∏–¥–æ–≤ —Ä—ã–±—ã '
        '(—â—É–∫–∞, –∫–∞—Ä–ø, –ª–µ—â –∏ –¥—Ä.).',
        reply_markup=inline_keyboards.back_in_guide_kb
    )


@router.message(F.text == '–í—ã–±–æ—Ä —Å–Ω–∞—Å—Ç–µ–π')
async def guid_answer(message: Message):
    await message.answer(
        text='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É —É–¥–æ—á–µ–∫, '
        '–∫–∞—Ç—É—à–µ–∫, –ª–µ—Å–æ–∫ –∏ –ø—Ä–∏–º–∞–Ω–æ–∫ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö '
        '–≤–∏–¥–æ–≤ —Ä—ã–±—ã –∏ —É—Å–ª–æ–≤–∏–π –ª–æ–≤–ª–∏.\n\n'
        '–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–±–æ—Ä–∫–µ —Å–Ω–∞—Å—Ç–∏.',
        reply_markup=inline_keyboards.back_in_guide_kb
    )


""" Handlers of the bite forecast """

@router.message(F.text == 'üìÖ –ó–∞–≤—Ç—Ä–∞')
@router.message(F.text == 'üìÜ –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞')
async def tomorrow_answer(message: Message):

    data: dict = await fishing_forecast()

    if '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in message.text.lower():
        day_now = list(data.keys())[1]
    else:
        day_now = list(data.keys())[0]


    await message.answer(
        text='~~~~~~~~~~~~\n'
            f"<b>{data[day_now]['day']} {day_now}:</b>\n\n"
            "<u><i>–í–ª–∏—è—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:</i></u>\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: <b>{data[day_now]['air_temp']}</b> üå°Ô∏è\n"
            f"–î–∞–≤–ª–µ–Ω–∏–µ: <b>{data[day_now]['pressure']}</b>\n"
            f"–í–µ—Ç–µ—Ä: <b>{data[day_now]['wind']} üí®</b>\n"
            f"–§–∞–∑–∞ –ª—É–Ω—ã: <b>{data[day_now]['moon_phase']}</b> {moon_image[data[day_now]['moon_phase']]}\n\n"
            f"{data[day_now]['discription']}\n"
            f'~~~~~~~~~~~~',
            parse_mode='html'
        )


@router.message(F.text == 'üóì –ù–∞ –Ω–µ–¥–µ–ª—é')
async def on_five_day_answer(message: Message):

    data: dict = await fishing_forecast()

    day_now = list(data.keys())
    
    text = '–ü—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞ —Ä—ã–±—ã –Ω–∞ 7 –¥–Ω–µ–π –¥–ª—è <b>–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É:</b>\n\n~~~~~~~~~~~~\n'
    
    for i in range(7):
        text += (
            f"<b>{data[day_now[i]]['day']} {day_now[i]}:</b>\n"
            
            "<u><i>–í–ª–∏—è—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã:</i></u>\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: <b>{data[day_now[i]]['air_temp']}</b> üå°Ô∏è\n"
            f"–î–∞–≤–ª–µ–Ω–∏–µ: <b>{data[day_now[i]]['pressure']}</b>\n"
            f"–í–µ—Ç–µ—Ä: <b>{data[day_now[i]]['wind']} üí®</b>\n"
            f"–§–∞–∑–∞ –ª—É–Ω—ã: <b>{data[day_now[i]]['moon_phase']}</b> {moon_image[data[day_now[i]]['moon_phase']]}\n\n"
            f"{data[day_now[i]]['discription']}\n\n"
            
            f'<i>{data[day_now[i]]["discription"]}</i>\n\n'
           '‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n\n'
        )
    
    await message.answer(text, parse_mode='html')
        
        